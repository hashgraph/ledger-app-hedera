"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import proto.basic_types_pb2
import proto.crypto_create_pb2
import proto.crypto_transfer_pb2
import proto.crypto_update_pb2
import proto.duration_pb2
import proto.token_associate_pb2
import proto.token_burn_pb2
import proto.token_dissociate_pb2
import proto.token_mint_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class TransactionBody(google.protobuf.message.Message):
    """*
    A single transaction. All transaction types are possible here.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TRANSACTIONID_FIELD_NUMBER: builtins.int
    NODEACCOUNTID_FIELD_NUMBER: builtins.int
    TRANSACTIONFEE_FIELD_NUMBER: builtins.int
    TRANSACTIONVALIDDURATION_FIELD_NUMBER: builtins.int
    GENERATERECORD_FIELD_NUMBER: builtins.int
    MEMO_FIELD_NUMBER: builtins.int
    CRYPTOCREATEACCOUNT_FIELD_NUMBER: builtins.int
    CRYPTOTRANSFER_FIELD_NUMBER: builtins.int
    CRYPTOUPDATEACCOUNT_FIELD_NUMBER: builtins.int
    TOKENMINT_FIELD_NUMBER: builtins.int
    TOKENBURN_FIELD_NUMBER: builtins.int
    TOKENASSOCIATE_FIELD_NUMBER: builtins.int
    TOKENDISSOCIATE_FIELD_NUMBER: builtins.int
    @property
    def transactionID(self) -> proto.basic_types_pb2.TransactionID:
        """*
        The ID for this transaction, which includes the payer's account (the
        account paying the transaction fee). If two transactions have the same
        transactionID, they won't both have an effect
        """
    @property
    def nodeAccountID(self) -> proto.basic_types_pb2.AccountID:
        """*
        The account of the node that submits the client's transaction to the
        network
        """
    transactionFee: builtins.int
    """*
    The maximum transaction fee the client is willing to pay
    """
    @property
    def transactionValidDuration(self) -> proto.duration_pb2.Duration:
        """*
        The transaction is invalid if consensusTimestamp >
        transactionID.transactionValidStart + transactionValidDuration
        """
    generateRecord: builtins.bool
    """*
    Should a record of this transaction be generated? (A receipt is always
    generated, but the record is optional)
    """
    memo: builtins.str
    """*
    Any notes or descriptions that should be put into the record (max length
    100)
    """
    @property
    def cryptoCreateAccount(self) -> proto.crypto_create_pb2.CryptoCreateTransactionBody:
        """*
        Create a new cryptocurrency account
        """
    @property
    def cryptoTransfer(self) -> proto.crypto_transfer_pb2.CryptoTransferTransactionBody:
        """*
        Transfer amount between accounts
        """
    @property
    def cryptoUpdateAccount(self) -> proto.crypto_update_pb2.CryptoUpdateTransactionBody:
        """*
        Modify information such as the expiration date for an account
        """
    @property
    def tokenMint(self) -> proto.token_mint_pb2.TokenMintTransactionBody:
        """*
        Mints new tokens to a token's treasury account
        """
    @property
    def tokenBurn(self) -> proto.token_burn_pb2.TokenBurnTransactionBody:
        """*
        Burns tokens from a token's treasury account
        """
    @property
    def tokenAssociate(self) -> proto.token_associate_pb2.TokenAssociateTransactionBody:
        """*
        Associate tokens to an account
        """
    @property
    def tokenDissociate(self) -> proto.token_dissociate_pb2.TokenDissociateTransactionBody:
        """*
        Dissociate tokens from an account
        """
    def __init__(
        self,
        *,
        transactionID: proto.basic_types_pb2.TransactionID | None = ...,
        nodeAccountID: proto.basic_types_pb2.AccountID | None = ...,
        transactionFee: builtins.int = ...,
        transactionValidDuration: proto.duration_pb2.Duration | None = ...,
        generateRecord: builtins.bool = ...,
        memo: builtins.str = ...,
        cryptoCreateAccount: proto.crypto_create_pb2.CryptoCreateTransactionBody | None = ...,
        cryptoTransfer: proto.crypto_transfer_pb2.CryptoTransferTransactionBody | None = ...,
        cryptoUpdateAccount: proto.crypto_update_pb2.CryptoUpdateTransactionBody | None = ...,
        tokenMint: proto.token_mint_pb2.TokenMintTransactionBody | None = ...,
        tokenBurn: proto.token_burn_pb2.TokenBurnTransactionBody | None = ...,
        tokenAssociate: proto.token_associate_pb2.TokenAssociateTransactionBody | None = ...,
        tokenDissociate: proto.token_dissociate_pb2.TokenDissociateTransactionBody | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cryptoCreateAccount", b"cryptoCreateAccount", "cryptoTransfer", b"cryptoTransfer", "cryptoUpdateAccount", b"cryptoUpdateAccount", "data", b"data", "nodeAccountID", b"nodeAccountID", "tokenAssociate", b"tokenAssociate", "tokenBurn", b"tokenBurn", "tokenDissociate", b"tokenDissociate", "tokenMint", b"tokenMint", "transactionID", b"transactionID", "transactionValidDuration", b"transactionValidDuration"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cryptoCreateAccount", b"cryptoCreateAccount", "cryptoTransfer", b"cryptoTransfer", "cryptoUpdateAccount", b"cryptoUpdateAccount", "data", b"data", "generateRecord", b"generateRecord", "memo", b"memo", "nodeAccountID", b"nodeAccountID", "tokenAssociate", b"tokenAssociate", "tokenBurn", b"tokenBurn", "tokenDissociate", b"tokenDissociate", "tokenMint", b"tokenMint", "transactionFee", b"transactionFee", "transactionID", b"transactionID", "transactionValidDuration", b"transactionValidDuration"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data", b"data"]) -> typing_extensions.Literal["cryptoCreateAccount", "cryptoTransfer", "cryptoUpdateAccount", "tokenMint", "tokenBurn", "tokenAssociate", "tokenDissociate"] | None: ...

global___TransactionBody = TransactionBody
