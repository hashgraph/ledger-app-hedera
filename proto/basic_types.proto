syntax = "proto3";

package Hedera;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */
import "nanopb.proto";
import "proto/timestamp.proto";
import "proto/wrappers.proto";

/**
 * Each shard has a nonnegative shard number. Each realm within a given shard
 * has a nonnegative realm number (that number might be reused in other
 * shards). And each account, file, and smart contract instance within a given
 * realm has a nonnegative number (which might be reused in other realms).
 * Every account, file, and smart contract instance is within exactly one
 * realm. So a FileID is a triplet of numbers, like 0.1.2 for entity number 2
 * within realm 1  within shard 0. Each realm maintains a single counter for
 * assigning numbers,  so if there is a file with ID 0.1.2, then there won't be
 * an account or smart contract instance with ID 0.1.2.
 *
 * Everything is partitioned into realms so that each Solidity smart contract
 * can  access everything in just a single realm, locking all those entities
 * while it's  running, but other smart contracts could potentially run in
 * other realms in  parallel. So realms allow Solidity to be parallelized
 * somewhat, even though the  language itself assumes everything is serial.
 */
message ShardID {
  /**
   * the shard number (nonnegative)
   */
  int64 shardNum = 1;
}

/**
 * The ID for a realm. Within a given shard, every realm has a unique ID. Each
 * account, file, and contract instance belongs to exactly one realm.
 */
message RealmID {
  /**
   * The shard number (nonnegative)
   */
  int64 shardNum = 1;

  /**
   * The realm number (nonnegative)
   */
  int64 realmNum = 2;
}

/**
 * The ID for an a cryptocurrency account
 */
message AccountID {
  /**
   * The shard number (nonnegative)
   */
  int64 shardNum = 1;

  /**
   * The realm number (nonnegative)
   */
  int64 realmNum = 2;

  /**
   * The account number unique within its realm which can be either a
   * non-negative integer or an alias public key. For any AccountID fields in
   * the query response, transaction record or transaction receipt only
   * accountNum will be populated.
   */
  oneof account {
    /**
     * A non-negative account number unique within its realm
     */
    int64 accountNum = 3;

    /**
     * The public key bytes to be used as the account's alias. The public key
     * bytes are the result of serializing a protobuf Key message for any
     * primitive key type. Currently only primitive key bytes are supported as
     * an alias (ThresholdKey, KeyList, ContractID, and delegatable_contract_id
     * are not supported)
     *
     * At most one account can ever have a given alias and it is used for
     * account creation if it was automatically created using a crypto
     * transfer. It will be null if an account is created normally. It is
     * immutable once it is set for an account.
     *
     * If a transaction auto-creates the account, any further transfers to that
     * alias will simply be deposited in that account, without creating
     * anything, and with no creation fee being charged.
     */
    bytes alias = 4 [ (nanopb).max_size = 32 ];
  }
}

/**
 * The ID for a file
 */
message FileID {
  /**
   * The shard number (nonnegative)
   */
  int64 shardNum = 1;

  /**
   * The realm number (nonnegative)
   */
  int64 realmNum = 2;

  /**
   * A nonnegative File number unique within its realm
   */
  int64 fileNum = 3;
}

/**
 * The ID for a smart contract instance
 */
message ContractID {
  /**
   * The shard number (nonnegative)
   */
  int64 shardNum = 1;

  /**
   * The realm number (nonnegative)
   */
  int64 realmNum = 2;

  oneof contract {
    /**
     * A nonnegative number unique within a given shard and realm
     */
    int64 contractNum = 3;

    /**
     * The 20-byte EVM address of the contract to call.
     *
     * Every contract has an EVM address determined by its
     * <tt>shard.realm.num</tt> id. This address is as follows: <ol> <li>The
     * first 4 bytes are the big-endian representation of the shard.</li>
     *     <li>The next 8 bytes are the big-endian representation of the
     * realm.</li> <li>The final 8 bytes are the big-endian representation of
     * the number.</li>
     *   </ol>
     *
     * Contracts created via CREATE2 have an <b>additional, primary address</b>
     * that is derived from the <a
     * href="https://eips.ethereum.org/EIPS/eip-1014">EIP-1014</a>
     * specification, and does not have a simple relation to a
     * <tt>shard.realm.num</tt> id.
     *
     * (Please do note that CREATE2 contracts can also be referenced by the
     * three-part EVM address described above.)
     */
    bytes evm_address = 4 [ (nanopb).max_size = 20 ];
  }
}

/**
 * The ID for a transaction. This is used for retrieving receipts and records
 * for a transaction, for appending to a file right after creating it, for
 * instantiating a smart contract with bytecode in a file just created, and
 * internally by the network for detecting when duplicate transactions are
 * submitted. A user might get a transaction processed faster by submitting it
 * to N nodes, each with a different node account, but all with the same
 * TransactionID. Then, the transaction will take effect when the first of all
 * those nodes submits the transaction and it reaches consensus. The other
 * transactions will not take effect. So this could make the transaction take
 * effect faster, if any given node might be slow. However, the full
 * transaction fee is charged for each transaction, so the total fee is N times
 * as much if the transaction is sent to N nodes.
 *
 * Applicable to Scheduled Transactions:
 *  - The ID of a Scheduled Transaction has transactionValidStart and
 * accountIDs inherited from the ScheduleCreate transaction that created it.
 * That is to say that they are equal
 *  - The scheduled property is true for Scheduled Transactions
 *  - transactionValidStart, accountID and scheduled properties should be
 * omitted
 */
message TransactionID {
  /**
   * The transaction is invalid if consensusTimestamp <
   * transactionID.transactionStartValid
   */
  Timestamp transactionValidStart = 1;

  /**
   * The Account ID that paid for this transaction
   */
  AccountID accountID = 2;

  /**
   * Whether the Transaction is of type Scheduled or no
   */
  bool scheduled = 3;

  /**
   * The identifier for an internal transaction that was spawned as part
   * of handling a user transaction. (These internal transactions share the
   * transactionValidStart and accountID of the user transaction, so a
   * nonce is necessary to give them a unique TransactionID.)
   *
   * An example is when a "parent" ContractCreate or ContractCall transaction
   * calls one or more HTS precompiled contracts; each of the "child"
   * transactions spawned for a precompile has a id with a different nonce.
   */
  int32 nonce = 4;
}

/**
 * An account, and the amount that it sends or receives during a cryptocurrency
 * or token transfer.
 */
message AccountAmount {
  /**
   * The Account ID that sends/receives cryptocurrency or tokens
   */
  AccountID accountID = 1;

  /**
   * The amount of tinybars (for Crypto transfers) or in the lowest
   * denomination (for Token transfers) that the account sends(negative) or
   * receives(positive)
   */
  sint64 amount = 2;

  /**
   * If true then the transfer is expected to be an approved allowance and the
   * accountID is expected to be the owner. The default is false (omitted).
   */
  bool is_approval = 3;
}

/**
 * A list of accounts and amounts to transfer out of each account (negative) or
 * into it (positive).
 */
message TransferList {
  /**
   * Multiple list of AccountAmount pairs, each of which has an account and
   * an amount to transfer into it (positive) or out of it (negative)
   * Limited to 2 for a transfer between two accounts
   */
  repeated AccountAmount accountAmounts = 1 [ (nanopb).max_count = 2 ];
}

/**
 * A sender account, a receiver account, and the serial number of an NFT of a
 * Token with NON_FUNGIBLE_UNIQUE type. When minting NFTs the sender will be
 * the default AccountID instance (0.0.0) and when burning NFTs, the receiver
 * will be the default AccountID instance.
 */
message NftTransfer {
  /**
   * The accountID of the sender
   */
  AccountID senderAccountID = 1;

  /**
   * The accountID of the receiver
   */
  AccountID receiverAccountID = 2;

  /**
   * The serial number of the NFT
   */
  int64 serialNumber = 3;

  /**
   * If true then the transfer is expected to be an approved allowance and the
   * senderAccountID is expected to be the owner. The default is false
   * (omitted).
   */
  bool is_approval = 4;
}

/**
 * A list of token IDs and amounts representing the transferred out (negative)
 * or into (positive) amounts, represented in the lowest denomination of the
 * token
 */
message TokenTransferList {
  /**
   * The ID of the token
   */
  TokenID token = 1;

  /**
   * Applicable to tokens of type FUNGIBLE_COMMON. Multiple list of
   * AccountAmounts, each of which has an account and amount
   * Limited to 1 for 1 allowed transfer
   */
  repeated AccountAmount transfers = 2 [ (nanopb).max_count = 1 ];

  /**
   * Applicable to tokens of type NON_FUNGIBLE_UNIQUE. Multiple list of
   * NftTransfers, each of which has a sender and receiver account, including
   * the serial number of the NFT
   * Limited to 0, no NFTs on device
   */
  repeated NftTransfer nftTransfers = 3 [ (nanopb).max_count = 0 ];

  /**
   * If present, the number of decimals this fungible token type is expected to
   * have. The transfer will fail with UNEXPECTED_TOKEN_DECIMALS if the actual
   * decimals differ.
   */
  UInt32Value expected_decimals = 4;
}

/**
 * A rational number, used to set the amount of a value transfer to collect as
 * a custom fee
 */
message Fraction {
  /**
   * The rational's numerator
   */
  int64 numerator = 1;

  /**
   * The rational's denominator; a zero value will result in
   * FRACTION_DIVIDES_BY_ZERO
   */
  int64 denominator = 2;
}

/**
 * Unique identifier for a token
 */
message TokenID {
  /**
   * A nonnegative shard number
   */
  int64 shardNum = 1;

  /**
   * A nonnegative realm number
   */
  int64 realmNum = 2;

  /**
   * A nonnegative token number
   */
  int64 tokenNum = 3;
}

/**
 * A Key can be a public key from either the Ed25519 or ECDSA(secp256k1)
 * signature schemes, where in the ECDSA(secp256k1) case we require the 33-byte
 * compressed form of the public key. We call these public keys <b>primitive
 * keys</b>.
 *
 * If an account has primitive key associated to it, then the corresponding
 * private key must sign any transaction to transfer cryptocurrency out of it.
 *
 * A Key can also be the ID of a smart contract instance, which is then
 * authorized to perform any precompiled contract action that requires this key
 * to sign.
 *
 * Note that when a Key is a smart contract ID, it <i>doesn't</i> mean the
 * contract with that ID will actually create a cryptographic signature. It
 * only means that when the contract calls a precompiled contract, the
 * resulting "child transaction" will be authorized to perform any action
 * controlled by the Key.
 *
 * A Key can be a "threshold key", which means a list of M keys, any N of which
 * must sign in order for the threshold signature to be considered valid. The
 * keys within a threshold signature may themselves be threshold signatures, to
 * allow complex signature requirements.
 *
 * A Key can be a "key list" where all keys in the list must sign unless
 * specified otherwise in the documentation for a specific transaction type
 * (e.g.  FileDeleteTransactionBody).  Their use is dependent on context. For
 * example, a Hedera file is created with a list of keys, where all of them
 * must sign a transaction to create or modify the file, but only one of them
 * is needed to sign a transaction to delete the file. So it's a single list
 * that sometimes acts as a 1-of-M threshold key, and sometimes acts as an
 * M-of-M threshold key.  A key list is always an M-of-M, unless specified
 * otherwise in documentation. A key list can have nested key lists or
 * threshold keys. Nested key lists are always M-of-M. A key list can have
 * repeated primitive public keys, but all repeated keys are only required to
 * sign once.
 *
 * A Key can contain a ThresholdKey or KeyList, which in turn contain a Key, so
 * this mutual recursion would allow nesting arbitrarily deep. A ThresholdKey
 * which contains a list of primitive keys has 3 levels: ThresholdKey ->
 * KeyList
 * -> Key. A KeyList which contains several primitive keys has 2 levels:
 * KeyList
 * -> Key. A Key with 2 levels of nested ThresholdKeys has 7 levels: Key ->
 * ThresholdKey -> KeyList -> Key -> ThresholdKey -> KeyList -> Key.
 *
 * Each Key should not have more than 46 levels, which implies 15 levels of
 * nested ThresholdKeys.
 */
message Key {
  oneof key {
    /**
     * smart contract instance that is authorized as if it had signed with a
     * key
     */
    ContractID contractID = 1;

    /**
     * Ed25519 public key bytes
     */
    bytes ed25519 = 2 [ (nanopb).max_size = 32 ];

    /**
     * (NOT SUPPORTED) RSA-3072 public key bytes
     */
    bytes RSA_3072 = 3 [ (nanopb).max_size = 32 ];

    /**
     * (NOT SUPPORTED) ECDSA with the p-384 curve public key bytes
     */
    bytes ECDSA_384 = 4 [ (nanopb).max_size = 32 ];

    /**
     * a threshold N followed by a list of M keys, any N of which are required
     * to form a valid signature
     * Leaving this in causes a circular dependecy
     */
    // ThresholdKey thresholdKey = 5;

    /**
     * A list of Keys of the Key type.
     * Leaving this in causes a circular dependency
     */
    // KeyList keyList = 6;

    /**
     * Compressed ECDSA(secp256k1) public key bytes
     */
    bytes ECDSA_secp256k1 = 7 [ (nanopb).max_size = 32 ];

    /**
     * A smart contract that, if the recipient of the active message frame,
     * should be treated as having signed. (Note this does not mean the <i>code
     * being executed in the frame</i> will belong to the given contract, since
     * it could be running another contract's code via <tt>delegatecall</tt>.
     * So setting this key is a more permissive version of setting the
     * contractID key, which also requires the code in the active message frame
     * belong to the the contract with the given id.)
     */
    ContractID delegatable_contract_id = 8;
  }
}

/**
 * A set of public keys that are used together to form a threshold signature.
 * If the threshold is N and there are M keys, then this is an N of M threshold
 * signature. If an account is associated with ThresholdKeys, then a
 * transaction to move cryptocurrency out of it must be signed by a list of M
 * signatures, where at most M-N of them are blank, and the other at least N of
 * them are valid signatures corresponding to at least N of the public keys
 * listed here.
 */
message ThresholdKey {
  /**
   * A valid signature set must have at least this many signatures
   */
  uint32 threshold = 1;

  /**
   * List of all the keys that can sign
   */
  KeyList keys = 2;
}

/**
 * A list of keys that requires all keys (M-of-M) to sign unless otherwise
 * specified in documentation. A KeyList may contain repeated keys, but all
 * repeated keys are only required to sign once.
 */
message KeyList {
  /**
   * list of keys
   * Limited to 1 here (because we don't have malloc!)
   */
  repeated Key keys = 1 [ (nanopb).max_count = 1 ];
}

/**
 * A number of <i>transferable units</i> of a certain token.
 *
 * The transferable unit of a token is its smallest denomination, as given by
 * the token's <tt>decimals</tt> property---each minted token contains
 * <tt>10<sup>decimals</sup></tt> transferable units. For example, we could
 * think of the cent as the transferable unit of the US dollar
 * (<tt>decimals=2</tt>); and the tinybar as the transferable unit of hbar
 * (<tt>decimals=8</tt>).
 *
 * Transferable units are not directly comparable across different tokens.
 */
message TokenBalance {
  /**
   * A unique token id
   */
  TokenID tokenId = 1;

  /**
   * Number of transferable units of the identified token. For token of type
   * FUNGIBLE_COMMON - balance in the smallest denomination. For token of type
   * NON_FUNGIBLE_UNIQUE - the number of NFTs held by the account
   */
  uint64 balance = 2;

  /**
   * Tokens divide into <tt>10<sup>decimals</sup></tt> pieces
   */
  uint32 decimals = 3;
}

/**
 * A sequence of token balances
 * Limited to 1 here
 */
message TokenBalances {
  repeated TokenBalance tokenBalances = 1 [ (nanopb).max_count = 1 ];
}

/* A token - account association */
message TokenAssociation {
  TokenID token_id = 1;     // The token involved in the association
  AccountID account_id = 2; // The account involved in the association
}

/**
 * Staking metadata for an account or a contract returned in CryptoGetInfo or
 * ContractGetInfo queries
 */
message StakingInfo {
  /**
   * If true, this account or contract declined to receive a staking reward.
   */
  bool decline_reward = 1;

  /**
   * The staking period during which either the staking settings for this
   * account or contract changed (such as starting staking or changing
   * staked_node_id) or the most recent reward was earned, whichever is later.
   * If this account or contract is not currently staked to a node, then this
   * field is not set.
   */
  Timestamp stake_period_start = 2;

  /**
   * The amount in tinybars that will be received in the next reward situation.
   */
  int64 pending_reward = 3;

  /**
   * The total of balance of all accounts staked to this account or contract.
   */
  int64 staked_to_me = 4;

  /**
   * ID of the account or node to which this account or contract is staking.
   */
  oneof staked_id {
    /**
     * The account to which this account or contract is staking.
     */
    AccountID staked_account_id = 5;

    /**
     * The ID of the node this account or contract is staked to.
     */
    int64 staked_node_id = 6;
  }
}