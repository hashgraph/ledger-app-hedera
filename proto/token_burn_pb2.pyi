"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import proto.basic_types_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class TokenBurnTransactionBody(google.protobuf.message.Message):
    """*
    Burns tokens from the Token's treasury Account. If no Supply Key is defined,
    the transaction will resolve to TOKEN_HAS_NO_SUPPLY_KEY. The operation
    decreases the Total Supply of the Token. Total supply cannot go below zero.
    The amount provided must be in the lowest denomination possible. Example:
    Token A has 2 decimals. In order to burn 100 tokens, one must provide amount
    of 10000. In order to burn 100.55 tokens, one must provide amount of 10055.
    For non fungible tokens the transaction body accepts serialNumbers list of
    integers as a parameter.

    If neither the amount nor the serialNumbers get filled, a
    INVALID_TOKEN_BURN_AMOUNT response code will be returned. If both amount and
    serialNumbers get filled, a INVALID_TRANSACTION_BODY response code will be
    returned.
    If the serialNumbers' list count is greater than the batch size limit global
    dynamic property, a BATCH_SIZE_LIMIT_EXCEEDED response code will be returned.
    If the serialNumbers list contains a non-positive integer as a serial number,
    a INVALID_NFT_ID response code will be returned.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TOKEN_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    SERIALNUMBERS_FIELD_NUMBER: builtins.int
    @property
    def token(self) -> proto.basic_types_pb2.TokenID:
        """*
        The token for which to burn tokens. If token does not exist, transaction
        results in INVALID_TOKEN_ID
        """
    amount: builtins.int
    """*
    Applicable to tokens of type FUNGIBLE_COMMON. The amount to burn from the
    Treasury Account. Amount must be a positive non-zero number, not bigger
    than the token balance of the treasury account (0; balance], represented in
    the lowest denomination.
    """
    @property
    def serialNumbers(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """*
        Applicable to tokens of type NON_FUNGIBLE_UNIQUE. The list of serial
        numbers to be burned.
        Limited to 1 here
        """
    def __init__(
        self,
        *,
        token: proto.basic_types_pb2.TokenID | None = ...,
        amount: builtins.int = ...,
        serialNumbers: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["token", b"token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["amount", b"amount", "serialNumbers", b"serialNumbers", "token", b"token"]) -> None: ...

global___TokenBurnTransactionBody = TokenBurnTransactionBody
